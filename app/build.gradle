plugins {
	id 'com.android.application'
	id 'kotlin-android' // for kotlin support
	id 'kotlin-kapt' // for annotations: room, hilt, etc
	id 'dagger.hilt.android.plugin'
}

android {
	compileSdk targetSdkVer
	// if not specified, latest + whatever external libs use will be used = a mess
	buildToolsVersion buildToolsVer
	ndkVersion ndkVer

	// these config apply to all build types
	defaultConfig {
		// if not specified, package name from manifest will be used, will change when that one changes
		applicationId "asceapps.weatheria"
		minSdk minSdkVer
		targetSdk targetSdkVer
		versionCode 9
		versionName "0.7.9"

		vectorDrawables.useSupportLibrary = true

		Properties ps = new Properties()
		rootProject.file("local.properties").withInputStream { ps.load(it) }
		resValue "string", "google_api_key", ps.google_api_key

		// removes unused l10n in libs like AppCompat/play services/maps?
		resConfigs "en", "ar"//, "fr", "es", "zh", "de", "ja", "ru", "ko", "pt", "in"
	}

	buildFeatures {
		viewBinding true
	}

	buildTypes {
		// anything related to applicationId is only specified in app module
		// minifyEnabled (and supposedly similar properties) are controlled only by app module
		// no need to copy them into other modules
		debug {
			applicationIdSuffix ".debug"
		}
		staging {
			debuggable true
			minifyEnabled true
			applicationIdSuffix ".staging"
			proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "release-rules.pro", "staging-rules.pro"
		}
		release {
			minifyEnabled true
			shrinkResources true // verify needed
			proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "release-rules.pro"
			ndk {
				debugSymbolLevel "full" // include android vitals debug file in app bundle
			}
		}
	}

	compileOptions {
		// to use java 8 libs in api < 26. needed even with kotlin for time apis
		coreLibraryDesugaringEnabled true

		sourceCompatibility javaVer
		targetCompatibility javaVer
	}

	kotlinOptions {
		jvmTarget = javaVer
		// IR compiler: default (since AS 4.2) kotlin compiler backend (supposedly faster, needed for Compose)
		freeCompilerArgs += [
			"-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi", // many flow operators
			"-Xopt-in=kotlinx.coroutines.FlowPreview", // for debounce
		]
	}

}

dependencies {
	implementation project(":shared")
	coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$desugarVer"

	// - no longer need to add kotlin stdlib here, included by default w/ plugin
	// - libs marked with * are ones that if u don't explicitly add, they add 2 diff versions

	// coroutines
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutineVer"
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutineVer"

	// *
	implementation "androidx.collection:collection-ktx:$collectionVer"
	// general & ui
	implementation "androidx.core:core-ktx:$coreVer"
	// *
	implementation "androidx.appcompat:appcompat:$appCompatVer"
	implementation "androidx.recyclerview:recyclerview:$recyclerViewVer"
	implementation "androidx.viewpager2:viewpager2:$viewPager2Ver"
	implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVer"
	// *
	implementation "androidx.coordinatorlayout:coordinatorlayout:$coordinatorLayoutVer"
	// *
	implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipeRefreshVer"
	implementation "com.google.android.material:material:$materialVer"

	// to use viewModels delegate, new result system, and lots more
	implementation "androidx.activity:activity-ktx:$activityVer"
	implementation "androidx.fragment:fragment-ktx:$fragmentVer"

	// viewModel & liveData
	// runtime offers lifecycleOwner val, new flow consumers (e.g repeatOnLifecycle), etc.
	implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVer"
	implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVer"
	// if i don't include these 2, older versions will load anyway
	implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleExVer"
	// * all 3 below
	implementation "androidx.lifecycle:lifecycle-process:$lifecycleVer"
	implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycleVer"
	implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVer"

	// nav
	// runtime offers findNavController() and navArgs property
	implementation "androidx.navigation:navigation-runtime-ktx:$navVer"
	implementation "androidx.navigation:navigation-fragment-ktx:$navVer"
	implementation "androidx.navigation:navigation-ui-ktx:$navVer"

	// *
	implementation "androidx.transition:transition:$transitionVer"
	// anim vector drawable
	// core offers listeners, interpolators, etc
	implementation "androidx.core:core-animation:$coreAnimationVer"
	implementation "androidx.vectordrawable:vectordrawable-animated:$vectorDrawableAnimVer"

	// new preferences (fragment, etc.)
	implementation "androidx.preference:preference-ktx:$preferenceVer"

	// maps & location
	implementation "com.google.android.libraries.maps:maps:$mapsVer"
	// flp (+ activity recognition + geofencing)
	implementation "com.google.android.gms:play-services-location:$locationVer"
	// manually specified the version available in google() instead of clinging to jcenter()
	implementation "com.android.volley:volley:$volleyVer"

	// work manager
	implementation "androidx.work:work-runtime-ktx:$workVer"

	// hilt
	kapt "com.google.dagger:hilt-android-compiler:$hiltVer"
	implementation "com.google.dagger:hilt-android:$hiltVer"

	// hilt with jetpack (viewModel, workManager)
	kapt "androidx.hilt:hilt-compiler:$hiltCompilerVer"
	implementation "androidx.hilt:hilt-work:$hiltCompilerVer"
	// this f***y artifact is always behind
	implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hiltCompilerOldVer"

	// multi screen size support
	implementation "com.intuit.sdp:sdp-android:$intuitVer"
	implementation "com.intuit.ssp:ssp-android:$intuitVer"
}
